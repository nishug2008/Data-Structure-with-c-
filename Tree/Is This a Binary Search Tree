#include<bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int data) {
        this->data = data;
        this->left = nullptr;
        this->right = nullptr;
    }
};

bool isBSTUtil(Node* node, int min, int max);

/* Returns true if the given
tree is a binary search tree
(efficient version). */
bool isBST(Node* node) {
    return (isBSTUtil(node, INT_MIN, INT_MAX));
}

/* Returns true if the given
tree is a BST and its values
are >= min and <= max. */
bool isBSTUtil(Node* node, int min, int max) {
  
    /* an empty tree is BST */
    if (node == nullptr)
        return true;

    /* false if this node violates
    the min/max constraint */
    if (node->data < min || node->data > max)
        return false;

    /* otherwise check the subtrees recursively,
    tightening the min or max constraint (Note : 
    Only distinct values are allowed in BST */
    return isBSTUtil(node->left, min, node->data - 1)
        && isBSTUtil(node->right, node->data + 1, max); 
}

/* Driver code*/
int main() {
    Node* root = new Node(4);
    root->left = new Node(2);
    root->right = new Node(5);
    root->left->left = new Node(1);
    root->left->right = new Node(3);

    // Function call
    if (isBST(root))
        cout << "Is BST";
    else
        cout << "Not a BST";

    return 0;
}
